name: build & deploy delete images cron
on:
  push:
    branches: ["feat/delete-files-cron"]

env:
  DB_HOST: ${{ secrets.DELETE_FILES_CRON_DB_HOST }}
  DB_USER: ${{ secrets.DELETE_FILES_CRON_DB_USER }}
  DB_NAME: ${{ secrets.DELETE_FILES_CRON_DB_NAME }}
  DB_PASS: ${{ secrets.DELETE_FILES_CRON_DB_PASS }}
  SECRET: ${{ secrets.DELETE_FILES_CRON_SECRET }}
  ENDPOINT: ${{ secrets.DELETE_FILES_CRON_ENDPOINT }}

jobs:
  build:
    needs: [generation]
    runs-on: ubuntu-latest
    steps:
      - name: Check Out Repo
        uses: actions/checkout@v2
      - run: echo "registry=https://registry.yarnpkg.com/" > ./bin/delete-photos/photos-server-copy/photos-server/.npmrc
      - run: echo "@internxt:registry=https://npm.pkg.github.com" >> ./bin/delete-photos/photos-server-copy/photos-server/.npmrc
      # You cannot read packages from other private repos with GITHUB_TOKEN
      # You have to use a PAT instead https://github.com/actions/setup-node/issues/49
      - run: echo //npm.pkg.github.com/:_authToken=${{ secrets.PERSONAL_ACCESS_TOKEN }} >> ./bin/delete-photos/photos-server-copy/photos-server/.npmrc
      - run: echo "always-auth=true" >> ./bin/delete-photos/photos-server-copy/photos-server/.npmrc
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Build and push to DockerHub
        uses: docker/build-push-action@v2
        with:
          context: bin/delete-photos/
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/photos-delete-files:${{ github.sha }}
  
  generation:
    runs-on: ubuntu-latest
    steps:
      - name: Check Out Repo
        uses: actions/checkout@v2
      - name: Generate k8s cronjob file
        run: |
          echo "$(ls -la ../../)"
          echo "$(ls -la ../)"
          echo "$(ls -la )"
          echo "$(pwd)"
          # filedirectory=$(find / -name k8scrondelete.tmpl.yaml 2>/dev/null)
          envsubst < "$filedirectory" > k8scrondelete.yaml

  deploy:
    needs: [build, generation]
    runs-on: ubuntu-latest
    environment:
      name: production
    steps:
      - uses: actions/checkout@master
      # - name: Deploy image
      #   uses: steebchen/kubectl@v2.0.0
      #   with: # defaults to latest kubectl binary version
      #     config: ${{ secrets.KUBE_CONFIG_DATA }}
      #     command: set image --record deployment/photos-server-dp photos-server=${{ secrets.DOCKERHUB_USERNAME }}/photos-server:${{ github.sha }}
      - name: Deploy CronJob
        uses: steebchen/kubectl@v2.0.0
        with:
          config: ${{ secrets.KUBE_CONFIG_DATA }}
          version: v1.20.2 # specify kubectl binary version explicitly
          command: apply -f k8scrondelete.yaml
      # - name: Verify deployment
      #   uses: steebchen/kubectl@v2.0.0
      #   with:
      #     config: ${{ secrets.KUBE_CONFIG_DATA }}
      #     version: v1.20.2 # specify kubectl binary version explicitly
      #     command: rollout status deployment/photos-server-dp
